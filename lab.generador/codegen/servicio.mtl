[module servicio('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Class)]
[comment @main/]
[generateServicio(c)/]
[/template]
[template public generateServicio(c : Class)]
[file ('/src/main/java/' + c._package.qualifiedName.replaceAll('::', '/') +'/servicio/'+ c.name + 'Servicio.java', false, 'UTF-8')]
package [c._package.qualifiedName.replaceAll('::', '.')/].servicio;


import [c._package.qualifiedName.replaceAll('::', '.')/].dao.*;
import [c._package.qualifiedName.replaceAll('::', '.')/].modelo.entity.*;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import javax.ejb.EJB;
import javax.ejb.Stateless;
[if (c.attribute->exists(a : Property | a.type.name.equalsIgnoreCase('Date')))]
import java.text.ParseException;
import java.text.SimpleDateFormat;
[/if]

/**
  *  @generated
  *  @author [c._package.eAnnotations.details->select(a: ecore::EStringToStringMapEntry|a.key='author').value/]
  */
[c.classHeader()/] {
	@EJB
    private [c.name/]DAO dao;

[if (c.attribute->exists(a : Property | a.type.name.equalsIgnoreCase('Date')))]
	private final SimpleDateFormat fecha = new SimpleDateFormat("dd/MM/yyyy");
[/if]

	[c.getAll()/]
	[c.getID()/]
	[c.insert()/]
	[c.delete()/]
	[c.update()/]
	
}
[/file]
[/template]

[template public classHeader(c : Class)]
@Stateless
[c.visibility/] class [c.name/]Servicio[c.extendsHeader()/][c.implementsHeader()/]
[/template]

[template public extendsHeader(c : Class) ? (c.superClass->notEmpty())]
 extends [c.superClass.name/]
[/template]

[template public implementsHeader(c : Class) ? (c.interfaceRealization->notEmpty())]
 implements [c.interfaceRealization.supplier.name->sep(', ')/]
[/template]

[template public getAll(a : Class)]

/**
* retorna una lista con los [a.name/] que se encuentran en la base de datos
* @return retorna una lista de [a.name/]
* @generated
*/
public List<[a.name/]> obtenerTodos(){
	return dao.obtenerTodos();
}


/**
* retorna una lista con los [a.name/] que se encuentran en la base de datos
* @return retorna una lista de [a.name/]
* @generated
*/
public List<[a.name/]> obtenerTodos(Integer startPosition,Integer maxResult){
	return dao.obtenerTodos(startPosition,maxResult);
}


[/template]

[template public getID(a : Class)]

/**
* @param id identificador del elemento [a.name/]
* @return [a.name/] del id dado
* @generated
*/
public [a.name/] obtener(Long id){
	return dao.obtener(id);
}

[/template]

[template public insert(a : Class)]

/**
 * almacena la informacion de [a.name/]
 * @param entity [a.name/] a guardar
 * @return [a.name/] con los cambios realizados por el proceso de guardar
 * @generated
 */
public [a.name/] guardar([a.name/] entity){
	return dao.guardar(entity);
}

[/template]

[template public update(a : Class)]

/**
 * actualiza la informacion de [a.name/]
 * @param entity [a.name/] a guardar
 * @return [a.name/] con los cambios realizados por el proceso de guardar
 * @generated
 */
public void actualizar([a.name/] entity){
	dao.actualizar(entity);
}

[/template]

[template public delete(a : Class)]

/**
 * Elimina el registro [a.name/] con el identificador dado
 * @param id identificador del [a.name/]
 * @generated 
 */
public void borrar(Long id){
	dao.borrar(id);
}

[/template]



[template public getNombre(c : Class)]

[/template]


[query public isMany(s : MultiplicityElement) : Boolean =
	s.lower > 1 or s.upper = -1 or s.upper > 1 
/]